************* Module adafruit_epd.il0398
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 2 files
==adafruit_epd.ssd1675:52
==adafruit_epd.ssd1675b:78
    def __init__(
        self, width, height, spi, *, cs_pin, dc_pin, sramcs_pin, rst_pin, busy_pin
    ):
        super().__init__(
            width, height, spi, cs_pin, dc_pin, sramcs_pin, rst_pin, busy_pin
        )
        stride = width
        if stride % 8 != 0:
            stride += 8 - stride % 8

        self._buffer1_size = int(stride * height / 8)
        self._buffer2_size = self._buffer1_size

        if sramcs_pin:
            self._buffer1 = self.sram.get_view(0)
            self._buffer2 = self.sram.get_view(self._buffer1_size)
        else:
            self._buffer1 = bytearray(self._buffer1_size)
            self._buffer2 = bytearray(self._buffer2_size)
        # since we have *two* framebuffers - one for red and one for black
        # we dont subclass but manage manually
        self._framebuf1 = adafruit_framebuf.FrameBuffer(
            self._buffer1,
            width,
            height,
            stride=stride,
            buf_format=adafruit_framebuf.MHMSB,
        )
        self._framebuf2 = adafruit_framebuf.FrameBuffer(
            self._buffer2,
            width,
            height,
            stride=stride,
            buf_format=adafruit_framebuf.MHMSB,
        )
        self.set_black_buffer(0, True)
        self.set_color_buffer(0, True)
        # pylint: enable=too-many-arguments

    def begin(self, reset=True):
        """Begin communication with the display and set basic settings"""
        if reset:
            self.hardware_reset()
        self.power_down()

    def busy_wait(self):
        """Wait for display to be done with current task, either by polling the
        busy pin, or pausing"""
        if self._busy:
            while self._busy.value:
                time.sleep(0.01)
        else:
            time.sleep(0.5)

    def power_up(self):
        """Power up the display in preparation for writing RAM and updating"""
        self.hardware_reset()
        time.sleep(0.1)
        self.busy_wait()
 (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 2 files
==adafruit_epd.il0373:49
==adafruit_epd.il0398:50
    def __init__(
        self, width, height, spi, *, cs_pin, dc_pin, sramcs_pin, rst_pin, busy_pin
    ):
        super().__init__(
            width, height, spi, cs_pin, dc_pin, sramcs_pin, rst_pin, busy_pin
        )

        self._buffer1_size = int(width * height / 8)
        self._buffer2_size = int(width * height / 8)

        if sramcs_pin:
            self._buffer1 = self.sram.get_view(0)
            self._buffer2 = self.sram.get_view(self._buffer1_size)
        else:
            self._buffer1 = bytearray((width * height) // 8)
            self._buffer2 = bytearray((width * height) // 8)
        # since we have *two* framebuffers - one for red and one for black
        # we dont subclass but manage manually
        self._framebuf1 = adafruit_framebuf.FrameBuffer(
            self._buffer1, width, height, buf_format=adafruit_framebuf.MHMSB
        )
        self._framebuf2 = adafruit_framebuf.FrameBuffer(
            self._buffer2, width, height, buf_format=adafruit_framebuf.MHMSB
        )
        self.set_black_buffer(0, True)
        self.set_color_buffer(1, True)
        # pylint: enable=too-many-arguments

    def begin(self, reset=True):
        """Begin communication with the display and set basic settings"""
        if reset:
            self.hardware_reset()
        self.power_down()

    def busy_wait(self):
        """Wait for display to be done with current task, either by polling the
        busy pin, or pausing"""
        if self._busy:
            while not self._busy.value: (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 3 files
==adafruit_epd.il0373:49
==adafruit_epd.il0398:50
==adafruit_epd.il91874:57
    def __init__(
        self, width, height, spi, *, cs_pin, dc_pin, sramcs_pin, rst_pin, busy_pin
    ):
        super().__init__(
            width, height, spi, cs_pin, dc_pin, sramcs_pin, rst_pin, busy_pin
        )

        self._buffer1_size = int(width * height / 8)
        self._buffer2_size = int(width * height / 8)

        if sramcs_pin:
            self._buffer1 = self.sram.get_view(0)
            self._buffer2 = self.sram.get_view(self._buffer1_size)
        else:
            self._buffer1 = bytearray((width * height) // 8)
            self._buffer2 = bytearray((width * height) // 8)
        # since we have *two* framebuffers - one for red and one for black
        # we dont subclass but manage manually
        self._framebuf1 = adafruit_framebuf.FrameBuffer(
            self._buffer1, width, height, buf_format=adafruit_framebuf.MHMSB
        )
        self._framebuf2 = adafruit_framebuf.FrameBuffer(
            self._buffer2, width, height, buf_format=adafruit_framebuf.MHMSB
        )
        self.set_black_buffer(0, True) (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 3 files
==adafruit_epd.ssd1608:77
==adafruit_epd.ssd1675:86
==adafruit_epd.ssd1675b:112
        )
        self.set_black_buffer(0, True)
        self.set_color_buffer(0, True)
        # pylint: enable=too-many-arguments

    def begin(self, reset=True):
        """Begin communication with the display and set basic settings"""
        if reset:
            self.hardware_reset()
        self.power_down()

    def busy_wait(self):
        """Wait for display to be done with current task, either by polling the
        busy pin, or pausing"""
        if self._busy:
            while self._busy.value:
                time.sleep(0.01)
        else:
            time.sleep(0.5)

    def power_up(self):
        """Power up the display in preparation for writing RAM and updating"""
        self.hardware_reset() (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 2 files
==adafruit_epd.ssd1608:82
==adafruit_epd.ssd1681:103
    def begin(self, reset=True):
        """Begin communication with the display and set basic settings"""
        if reset:
            self.hardware_reset()
        self.power_down()

    def busy_wait(self):
        """Wait for display to be done with current task, either by polling the
        busy pin, or pausing"""
        if self._busy:
            while self._busy.value:
                time.sleep(0.01)
        else:
            time.sleep(0.5)

    def power_up(self):
        """Power up the display in preparation for writing RAM and updating"""
        self.hardware_reset()
        self.busy_wait() (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 3 files
==adafruit_epd.ssd1675:91
==adafruit_epd.ssd1675b:117
==adafruit_epd.ssd1681:103
    def begin(self, reset=True):
        """Begin communication with the display and set basic settings"""
        if reset:
            self.hardware_reset()
        self.power_down()

    def busy_wait(self):
        """Wait for display to be done with current task, either by polling the
        busy pin, or pausing"""
        if self._busy:
            while self._busy.value:
                time.sleep(0.01)
        else:
            time.sleep(0.5)

    def power_up(self):
        """Power up the display in preparation for writing RAM and updating"""
        self.hardware_reset() (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 2 files
==adafruit_epd.il0373:81
==adafruit_epd.il91874:90
        self.power_down()

    def busy_wait(self):
        """Wait for display to be done with current task, either by polling the
        busy pin, or pausing"""
        if self._busy:
            while not self._busy.value:
                time.sleep(0.01)
        else:
            time.sleep(0.5)

    def power_up(self):
        """Power up the display in preparation for writing RAM and updating"""
        self.hardware_reset() (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 2 files
==adafruit_epd.ssd1608:58
==adafruit_epd.ssd1681:73
    def __init__(
        self, width, height, spi, *, cs_pin, dc_pin, sramcs_pin, rst_pin, busy_pin
    ):
        super().__init__(
            width, height, spi, cs_pin, dc_pin, sramcs_pin, rst_pin, busy_pin
        )

        if height % 8 != 0:
            height += 8 - height % 8
            self._height = height

        self._buffer1_size = int(width * height / 8) (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 2 files
==adafruit_epd.il0373:123
==adafruit_epd.il0398:123
        time.sleep(0.1)
        self.busy_wait()
        if not self._busy:
            time.sleep(15)  # wait 15 seconds

    def write_ram(self, index):
        """Send the one byte command for starting the RAM write process. Returns
        the byte read at the same time over SPI. index is the RAM buffer, can be
        0 or 1 for tri-color displays."""
        if index == 0: (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 6 files
==adafruit_epd.il0373:77
==adafruit_epd.il0398:78
==adafruit_epd.ssd1608:82
==adafruit_epd.ssd1675:91
==adafruit_epd.ssd1675b:117
==adafruit_epd.ssd1681:103
    def begin(self, reset=True):
        """Begin communication with the display and set basic settings"""
        if reset:
            self.hardware_reset()
        self.power_down()

    def busy_wait(self):
        """Wait for display to be done with current task, either by polling the
        busy pin, or pausing"""
        if self._busy: (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 2 files
==adafruit_epd.il0373:88
==adafruit_epd.il0398:90
                time.sleep(0.01)
        else:
            time.sleep(0.5)

    def power_up(self):
        """Power up the display in preparation for writing RAM and updating"""
        self.hardware_reset()
        self.busy_wait()
 (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 4 files
==adafruit_epd.il0373:56
==adafruit_epd.il0398:57
==adafruit_epd.il91874:64
==adafruit_epd.ssd1681:84
        self._buffer1_size = int(width * height / 8)
        self._buffer2_size = int(width * height / 8)

        if sramcs_pin:
            self._buffer1 = self.sram.get_view(0)
            self._buffer2 = self.sram.get_view(self._buffer1_size)
        else:
            self._buffer1 = bytearray((width * height) // 8)
            self._buffer2 = bytearray((width * height) // 8) (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 4 files
==adafruit_epd.ssd1608:136
==adafruit_epd.ssd1675:158
==adafruit_epd.ssd1675b:200
==adafruit_epd.ssd1681:154
        self.busy_wait()
        if not self._busy:
            time.sleep(3)  # wait 3 seconds

    def write_ram(self, index):
        """Send the one byte command for starting the RAM write process. Returns
        the byte read at the same time over SPI. index is the RAM buffer, can be
        0 or 1 for tri-color displays."""
        if index == 0: (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 2 files
==adafruit_epd.il91874:75
==adafruit_epd.ssd1681:93
        self._framebuf1 = adafruit_framebuf.FrameBuffer(
            self._buffer1, width, height, buf_format=adafruit_framebuf.MHMSB
        )
        self._framebuf2 = adafruit_framebuf.FrameBuffer(
            self._buffer2, width, height, buf_format=adafruit_framebuf.MHMSB
        )
        self.set_black_buffer(0, True)
        self.set_color_buffer(1, False) (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 4 files
==adafruit_epd.il0373:88
==adafruit_epd.il0398:90
==adafruit_epd.ssd1608:93
==adafruit_epd.ssd1681:114
                time.sleep(0.01)
        else:
            time.sleep(0.5)

    def power_up(self):
        """Power up the display in preparation for writing RAM and updating"""
        self.hardware_reset()
        self.busy_wait() (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 7 files
==adafruit_epd.il0373:11
==adafruit_epd.il0398:11
==adafruit_epd.il91874:11
==adafruit_epd.ssd1608:11
==adafruit_epd.ssd1675:11
==adafruit_epd.ssd1675b:11
==adafruit_epd.ssd1681:11
import time
from micropython import const
import adafruit_framebuf
from adafruit_epd.epd import Adafruit_EPD

__version__ = "0.0.0-auto.0"
__repo__ = "https://github.com/adafruit/Adafruit_CircuitPython_EPD.git"
 (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 3 files
==adafruit_epd.il0373:67
==adafruit_epd.il0398:68
==adafruit_epd.ssd1681:93
        self._framebuf1 = adafruit_framebuf.FrameBuffer(
            self._buffer1, width, height, buf_format=adafruit_framebuf.MHMSB
        )
        self._framebuf2 = adafruit_framebuf.FrameBuffer(
            self._buffer2, width, height, buf_format=adafruit_framebuf.MHMSB
        )
        self.set_black_buffer(0, True) (duplicate-code)
adafruit_epd/il0398.py:1:0: R0801: Similar lines in 7 files
==adafruit_epd.il0373:88
==adafruit_epd.il0398:90
==adafruit_epd.il91874:97
==adafruit_epd.ssd1608:93
==adafruit_epd.ssd1675:102
==adafruit_epd.ssd1675b:128
==adafruit_epd.ssd1681:114
                time.sleep(0.01)
        else:
            time.sleep(0.5)

    def power_up(self):
        """Power up the display in preparation for writing RAM and updating"""
        self.hardware_reset() (duplicate-code)

--------------------------------------------------------------------
Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)

